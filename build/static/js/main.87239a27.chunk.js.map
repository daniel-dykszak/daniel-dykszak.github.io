{"version":3,"sources":["events/components/common/event-details.component.tsx","logo.svg","events/domain/location-event.service.ts","events/components/event-list/event-group-filter.component.tsx","events/domain/event-category.service.ts","events/redux/event-reducer.ts","fontawesome/star-regular.svg","fontawesome/star-solid.svg","events/components/common/event-favorites-btn.component.tsx","geolocation/redux/geolocation-reducer.ts","geolocation/geolocation.service.tsx","geolocation/components/geolocation-from-you.component.tsx","events/components/event-list/event-list.component.tsx","events/components/event-list/event-list-breadcrumb.component.tsx","events/components/event-list-page.component.tsx","geolocation/components/geolocation-get-my-location.component.tsx","events/components/event-home-page.component.tsx","events/components/event-details/event-details-breadcrumb.component.tsx","events/components/event-details-page.component.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","events/event-repository.ts","events/event-service.ts","events/redux/event-middleware.ts","store.ts","events/redux/event-store.ts","index.tsx"],"names":["EventDetailsTypes","getEventSlug","event","titleForUrl","title","replace","id","filterEventsByCategory","events","category","favoritesIds","filter","has","EventGroupFilter","useSelector","state","list","favoriteIds","categoryList","map","el","index","arr","indexOf","getCategoryFromEvents","useParams","className","categories","selectedCategory","EventGroupListSelectFilter","push","useHistory","htmlFor","onChange","ev","newSelectedCategory","target","value","EventGroupListBtnFilter","to","activeClassName","length","size","EventActions","EventFavoritesBtn","favList","dispatch","useDispatch","isInFavorites","AddToFav","type","EventsAddToFavorites","RemoveFromFav","EventsRemoveFromFavorites","btnTitle","onClick","height","width","src","starSolidSVG","starRegularSVG","alt","GeolocationActions","GeolocationService","Promise","resolve","rejects","window","navigator","geolocation","getCurrentPosition","position","error","lat1","lon1","lat2","lon2","deg2rad","deg","Math","PI","dLat","dLon","a","sin","cos","atan2","sqrt","GeolocationFromYou","props","userLocation","distance","getDistanceInKm","lat","lng","coords","latitude","longitude","toFixed","EventDetails","hasUserCoords","EXTENDED","location","address","description","parseFloat","EventList","filteredList","SIMPLE","EventListBreadcrumb","EventListPage","GeolocationGetMyLocation","onLocationChange","children","handleGetLocation","getLocation","then","geo","EventHomePage","history","EventDetailsBreadcrumb","EventDetailsPage","eventName","eventId","split","find","e","findEventById","undefined","App","logo","style","exact","path","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","EventRepository","fetch","json","EventService","getList","storageFav","localStorage","getItem","localStorageFavKey","Set","favouriteIds","localstorageItem","Array","from","join","setItem","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","RootReducer","combineReducers","action","delete","store","createStore","getStoredFavoritesSet","applyMiddleware","storeApi","next","favouritesIds","getState","storeFavoritesSet","ReactDOM","render","document","getElementById","EventsListFulfilled","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.87239a27.chunk.js","sourcesContent":["import {Event} from \"../../domain/event\";\r\nimport {EventFavoritesBtn} from \"./event-favorites-btn.component\";\r\nimport {FunctionComponent} from \"react\";\r\nimport {GeolocationFromYou} from \"../../../geolocation\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {getEventSlug} from \"../../domain/location-event.service\";\r\n\r\nexport enum EventDetailsTypes {\r\n    SIMPLE,\r\n    EXTENDED\r\n}\r\ntype EventDetailsProp = {\r\n    event: Event,\r\n    type: EventDetailsTypes\r\n}\r\nexport const EventDetails: FunctionComponent<EventDetailsProp> = ({\r\n    event,\r\n    type\r\n}) => {\r\n    const hasUserCoords = useSelector<RootState, boolean>(state => !!state.geolocation.userLocation);\r\n    return <article className={\"card h-100\"}>\r\n        <h2 className={\"card-header\"}>\r\n            <Link className={\"link-primary me-4\"}\r\n                  title={`Go to event ${event.title} details`}\r\n                  to={`/event/${getEventSlug(event)}`}>\r\n                {event.title}\r\n            </Link>\r\n        </h2>\r\n        <div className={\"position-absolute top-0 end-0\"}>\r\n            <EventFavoritesBtn event={event} className={\"m-1\"} />\r\n        </div>\r\n        <div className=\"card-body\">\r\n            <h3 className=\"card-title\">\r\n                {type === EventDetailsTypes.EXTENDED && <address>\r\n                    {event.location.address}\r\n                </address>}\r\n            </h3>\r\n            <p className=\"card-text\">{event.description}</p>\r\n        </div>\r\n        <footer className={\"card-footer\"}>\r\n            {hasUserCoords && <GeolocationFromYou\r\n                lat={parseFloat(event.location.lat)}\r\n                lng={parseFloat(event.location.lng)}\r\n                className=\"text-muted h4\"/>}\r\n            <Link to={\"/event-category/\" + event.category}\r\n                  title={`check ${event.category} category`}\r\n                  className={\"float-end btn btn-dark\"}>{event.category}</Link>\r\n        </footer>\r\n    </article>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.634daa0e.svg\";","import {Event} from \"./event\";\r\n\r\nexport const findEventById = (list: Event[], eventId: string): Event | undefined => {\r\n    return list.find(e => e.id === eventId);\r\n}\r\n\r\nexport const getEventSlug = (event: Event): string => {\r\n    const titleForUrl = event.title.replace(/\\s/g, \"-\")\r\n    return `${event.id}-${titleForUrl}`\r\n}\r\n\r\nexport const getIdFromSlug = (slug: string): string => {\r\n    return slug.split(\"-\")[0];\r\n}\r\n\r\nexport const filterEventsByCategory = (\r\n    events: Event[],\r\n    category: string,\r\n    favoritesIds: Set<string>): Event[] => {\r\n    return events.filter((event) => {\r\n        if (!category) return true;\r\n        if (category === \"favorites\") return favoritesIds.has(event.id);\r\n        return event.category === category;\r\n    });\r\n}\r\n","import {ChangeEvent, FC} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {Event} from \"../../domain/event\";\r\nimport {getCategoryFromEvents} from \"../../domain/event-category.service\";\r\nimport {NavLink, useHistory, useParams} from \"react-router-dom\";\r\nimport {filterEventsByCategory} from \"../../domain/location-event.service\";\r\n\r\nexport const EventGroupFilter = () => {\r\n    const events = useSelector<RootState, Event[]>(state => state.events.list);\r\n    const favoriteIds = useSelector<RootState, Set<string>>(state => state.events.favoriteIds);\r\n    const categoryList = getCategoryFromEvents(events);\r\n    const {category} = useParams<{category: string}>()\r\n    return <div className={\"my-2\"}>\r\n        <div className={\"d-block d-sm-none\"}>\r\n            <EventGroupListSelectFilter categories={categoryList} selectedCategory={category}/>\r\n        </div>\r\n        <div className={\"d-none d-sm-block\"}>\r\n            <EventGroupListBtnFilter categories={categoryList}\r\n                                     selectedCategory={category}\r\n                                     events={events}\r\n                                     favoriteIds={favoriteIds}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype EventGroupListFilterProps = {categories: string[], selectedCategory?: string}\r\n    export const EventGroupListSelectFilter: FC<EventGroupListFilterProps> = ({categories, selectedCategory}) => {\r\n    const {push} = useHistory()\r\n    const onChange = (ev: ChangeEvent<HTMLSelectElement>) => {\r\n        const newSelectedCategory = ev.target.value;\r\n        if (newSelectedCategory === \"All\") {\r\n            push(\"/events/\");\r\n        } else {\r\n            push(\"/event-category/\" + newSelectedCategory);\r\n        }\r\n    }\r\n    return <div className={\"d-flex flex-column\"}>\r\n        <label htmlFor=\"eventGroupFilter\" className=\"form-label\">Filter By Category:</label>\r\n        <select className=\"form-select\" id={\"eventGroupFilter\"} onChange={onChange} value={selectedCategory}>\r\n            {<option>All</option>}\r\n            {<option key={\"Favorites\"} value={\"favorites\"}>Favorites</option>}\r\n            {categories.map((category) => {\r\n                    return <option value={category} key={category}>\r\n                        {category}\r\n                    </option>\r\n                })};\r\n        </select>\r\n    </div>\r\n};\r\ntype EventGroupListBtnFilterProps = {\r\n    categories: string[],\r\n    selectedCategory?: string,\r\n    events: Event[]\r\n    favoriteIds: Set<string>\r\n}\r\nexport const EventGroupListBtnFilter: FC<EventGroupListBtnFilterProps> = ({\r\n        categories,\r\n        events,\r\n        selectedCategory,\r\n        favoriteIds}) => {\r\n\r\n    return <div className={\"d-flex flex-row\"}>\r\n        <span className={\"me-3\"}>Filter by Category: </span>\r\n        <NavLink to={\"/events/\"} activeClassName={\"btn-primary\"}\r\n                 className={`btn ${!! selectedCategory ? 'btn-outline-dark': \"\"} position-relative`}>\r\n            All\r\n            <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                {events.length}\r\n                <span className=\"visually-hidden\">items in category</span>\r\n            </span>\r\n        </NavLink>\r\n        <NavLink to={\"/event-category/favorites\"}\r\n                 className={`ms-3 btn ${selectedCategory !== 'favorites' ? 'btn-outline-dark': \"\"} position-relative`}\r\n                 activeClassName={\"btn-primary\"}>\r\n            Favorites\r\n            <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                {favoriteIds.size}\r\n                <span className=\"visually-hidden\">favorite items</span>\r\n            </span>\r\n        </NavLink>\r\n        {categories.map(category =>\r\n            <NavLink key={category} to={\"/event-category/\" + category} activeClassName={\"btn-primary\"}\r\n                     className={`btn position-relative ${selectedCategory !== category ? 'btn-outline-dark': \"\"} ms-3`}\r\n            >\r\n                {category}\r\n                <span className=\"position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger\">\r\n                {filterEventsByCategory(events, category || \"\", favoriteIds).length}\r\n                    <span className=\"visually-hidden\">favorite items</span>\r\n            </span>\r\n            </NavLink>\r\n        )}\r\n    </div>\r\n};","import {Event} from \"./event\";\r\n\r\nexport const getCategoryFromEvents = (events: Event[]) => {\r\n    const removeDuplicates = (el: string, index: number, arr: string[]) =>\r\n        arr.indexOf(el) === index\r\n\r\n    return events.map(event => event.category)\r\n        .filter(removeDuplicates)\r\n}","import {EventStore} from \"./event-store\";\r\nimport {Event} from \"../domain/event\";\r\n\r\nexport const EventActions = {\r\n    \"EVENTS_LIST_FULFILLED\": \"EVENTS_LIST_FULFILLED\",\r\n    \"EVENTS_ADD_TO_FAVORITES\": \"EVENTS_ADD_TO_FAVORITES\",\r\n    \"EVENTS_REMOVE_FROM_FAVORITES\": \"EVENTS_REMOVE_FROM_FAVORITES\"\r\n};\r\n\r\nexport const EventsListFulfilled = (list: Event[]) => ({\r\n    type: EventActions.EVENTS_LIST_FULFILLED,\r\n    list,\r\n});\r\n\r\nexport const EventsAddToFavorites = (event: Event) => ({\r\n    type: EventActions.EVENTS_ADD_TO_FAVORITES,\r\n    event,\r\n})\r\nexport const EventsRemoveFromFavorites = (event: Event) => ({\r\n    type: EventActions.EVENTS_REMOVE_FROM_FAVORITES,\r\n    event,\r\n})\r\n\r\nexport const eventReducer = (state: EventStore = {\r\n    list: [],\r\n    favoriteIds: new Set<string>()\r\n}, action: any) => {\r\n    switch (action.type) {\r\n        case EventActions.EVENTS_LIST_FULFILLED:\r\n            return ({\r\n                ...state,\r\n                list: action.list,\r\n            })\r\n        case EventActions.EVENTS_ADD_TO_FAVORITES:\r\n            return ({\r\n                ...state,\r\n                favoriteIds: new Set(\r\n                    [...Array.from(state.favoriteIds), action.event.id]\r\n                )\r\n            })\r\n        case EventActions.EVENTS_REMOVE_FROM_FAVORITES:\r\n            state.favoriteIds.delete(action.event.id)\r\n            return ({\r\n                ...state,\r\n                favoriteIds: new Set(state.favoriteIds)\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/star-regular.1666a556.svg\";","export default __webpack_public_path__ + \"static/media/star-solid.c9be8e23.svg\";","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, RootState} from \"../../../store\";\r\nimport {Event} from \"../../domain/event\";\r\nimport {EventsAddToFavorites, EventsRemoveFromFavorites} from \"../../redux/event-reducer\";\r\nimport starRegularSVG from \"../../../fontawesome/star-regular.svg\";\r\nimport starSolidSVG from \"../../../fontawesome/star-solid.svg\";\r\ntype Props = {\r\n    event: Event\r\n    className? :string\r\n}\r\nexport const EventFavoritesBtn:React.FunctionComponent<Props> = ({event, className}) => {\r\n    const favList = useSelector<RootState, Set<string>>(\r\n        state => state.events.favoriteIds\r\n    );\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const isInFavorites = favList.has(event.id);\r\n    const AddToFav = (event: Event) => dispatch(EventsAddToFavorites(event));\r\n    const RemoveFromFav = (event: Event) => dispatch(EventsRemoveFromFavorites(event));\r\n    const btnTitle = isInFavorites ? `Remove ${event.title} from favourites`:\r\n        `Add ${event.title} to favourites`;\r\n    return <>\r\n        <button type=\"button\"\r\n            className={\"btn btn-info \" + className}\r\n                onClick={() => isInFavorites ? RemoveFromFav(event): AddToFav(event)}\r\n            title={btnTitle}>\r\n            <img height={20} width={20} src={isInFavorites? starSolidSVG: starRegularSVG } alt=\"\"/>\r\n        </button>\r\n    </>\r\n}","import {GeolocationStore} from \"./geolocation-store\";\r\n\r\nexport const GeolocationActions = {\r\n    \"GEOLOCATION_STORE_USER_LOCATION\": \"GEOLOCATION_STORE_USER_LOCATION\"\r\n};\r\n\r\nexport const GeolocationStoreUserLocation = (userLocation: GeolocationPosition) => ({\r\n    type: GeolocationActions.GEOLOCATION_STORE_USER_LOCATION,\r\n    userLocation,\r\n});\r\n\r\nexport const geolocationReducer = (state: GeolocationStore = {}, action: any) => {\r\n    switch (action.type) {\r\n        case GeolocationActions.GEOLOCATION_STORE_USER_LOCATION:\r\n            return ({\r\n                ...state,\r\n                userLocation: action.userLocation\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}","export class GeolocationService {\r\n    static getLocation(): Promise<GeolocationPosition> {\r\n        return new Promise((resolve, rejects) => {\r\n            if (window.navigator.geolocation) {\r\n                window.navigator.geolocation.getCurrentPosition((position) => {\r\n                    resolve(position);\r\n                }, (error) => rejects(error))\r\n            }\r\n        })\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/Haversine_formula\r\n    // http://www.movable-type.co.uk/scripts/latlong.html\r\n    static getDistanceInKm(lat1: number, lon1: number, lat2: number, lon2: number) {\r\n        function deg2rad(deg: number) {\r\n            return deg * (Math.PI/180)\r\n        }\r\n        const R = 6371;\r\n        const dLat = deg2rad(lat2-lat1);\r\n        const dLon = deg2rad(lon2-lon1);\r\n        const a =\r\n            Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n            Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\r\n            Math.sin(dLon/2) * Math.sin(dLon/2)\r\n        ;\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n        return R * c;\r\n    }\r\n\r\n}\r\n","import {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {GeolocationService} from \"../geolocation.service\";\r\n\r\ntype GeolocationFromYouProps = {\r\n    lat: number;\r\n    lng: number;\r\n};\r\nexport const GeolocationFromYou = (props: GeolocationFromYouProps & any) => {\r\n    const userLocation = useSelector<RootState, GeolocationPosition>\r\n        (state => state.geolocation.userLocation);\r\n    const distance = GeolocationService.getDistanceInKm(\r\n        props.lat, props.lng,\r\n        userLocation.coords.latitude,\r\n        userLocation.coords.longitude\r\n    );\r\n    return <span {...props}>\r\n        {distance.toFixed(1)} km from you\r\n    </span>\r\n};\r\n","import {useParams} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../../store\";\r\nimport {Event} from \"../../domain/event\";\r\nimport {filterEventsByCategory} from \"../../domain/location-event.service\";\r\nimport {EventGroupFilter} from \"./event-group-filter.component\";\r\nimport {EventDetails, EventDetailsTypes} from \"../common/event-details.component\";\r\n\r\nexport const EventList = () => {\r\n    const list = useSelector<RootState, Event[]>(state => state.events.list);\r\n    const favoriteIds = useSelector<RootState, Set<string>>(state => state.events.favoriteIds);\r\n    const {category} = useParams<{category: string}>();\r\n    const filteredList = filterEventsByCategory(list, category, favoriteIds);\r\n    return <section>\r\n        <header>\r\n            <EventGroupFilter/>\r\n        </header>\r\n        <div className={\"container\"}>\r\n            <ul className={\"row list-unstyled\"}>\r\n                {filteredList.map(event =>\r\n                    <li className={\"col-md-4 col-sm-6 mb-4\"} key={event.id}>\r\n                        <EventDetails type={EventDetailsTypes.SIMPLE} event={event} />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n        <footer className={\"my-2 ms-1\"}>Found {filteredList.length} events</footer>\r\n    </section>\r\n}","import {Link} from \"react-router-dom\";\r\nimport {FunctionComponent} from \"react\";\r\n\r\nexport const EventListBreadcrumb: FunctionComponent = () => {\r\n    return <ul className={\"breadcrumb breadcrumb-container\"}>\r\n        <li className={\"breadcrumb-item\"}>\r\n            <Link title={\"home\"} to=\"/\">Home</Link>\r\n        </li>\r\n        <li className={\"breadcrumb-item breadcrumb-item__inactive\"}>\r\n            Event list\r\n        </li>\r\n    </ul>\r\n}","import {EventList} from \"./event-list/event-list.component\";\r\nimport {EventListBreadcrumb} from \"./event-list/event-list-breadcrumb.component\";\r\n\r\nexport const EventListPage = () => {\r\n    return <>\r\n        <EventListBreadcrumb/>\r\n        <EventList/>\r\n    </>\r\n}","import {useDispatch} from \"react-redux\";\r\nimport {GeolocationService} from \"../geolocation.service\";\r\nimport {GeolocationStoreUserLocation} from \"../redux/geolocation-reducer\";\r\nimport {FC} from \"react\";\r\n\r\ntype GetMyLocationProps = {\r\n    onLocationChange: (geo: GeolocationPosition) => void,\r\n    children: React.ReactNode,\r\n    className: string\r\n}\r\nexport const GeolocationGetMyLocation: FC<GetMyLocationProps> = ({\r\n        onLocationChange,\r\n        className,\r\n        children,\r\n\r\n    }) => {\r\n    const dispatch = useDispatch();\r\n    const handleGetLocation = () => {\r\n        GeolocationService.getLocation()\r\n            .then((geo) => {\r\n                dispatch(GeolocationStoreUserLocation(geo))\r\n                onLocationChange(geo);\r\n            });\r\n    }\r\n    return <button className={className} type=\"button\" onClick={() => handleGetLocation()}>\r\n        {children}\r\n    </button>\r\n}","import {GeolocationGetMyLocation} from \"../../geolocation/components/geolocation-get-my-location.component\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\n\r\nexport const EventHomePage = () => {\r\n    const history = useHistory();\r\n    return <>\r\n        <div className=\"p-5 mb-4 bg-light rounded-3\">\r\n            <div className=\"container-fluid py-5\">\r\n                <p className=\"col-md-8 fs-4\">Event plus help you find attractive locations near you.</p>\r\n                <GeolocationGetMyLocation\r\n                    className={\"btn btn-primary btn-lg\"}\r\n                    onLocationChange={() => history.push(\"/events\")}>\r\n                    Get my location to see events.\r\n                </GeolocationGetMyLocation>\r\n                <Link title={\"proceed without location\"} to={\"/events\"}\r\n                      className={\"btn btn-secondary ms-2 mt-1\"}>\r\n                    Proceed without location\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    </>\r\n}","import {Link} from \"react-router-dom\";\r\nimport {FunctionComponent} from \"react\";\r\nimport {Event} from \"../../domain/event\";\r\n\r\nexport type EventDetailsBreadcrumbProps = {\r\n    event: Event\r\n}\r\nexport const EventDetailsBreadcrumb: FunctionComponent<EventDetailsBreadcrumbProps> =\r\n    ({event}) => {\r\n        return <nav aria-label=\"breadcrumb\">\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link title={\"Home\"} to=\"/\">Home</Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item\">\r\n                    <Link title={`Category ${event.category}`} to={`/event-category/${event.category}`}>\r\n                        {event.category}\r\n                    </Link>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                    {event.title}\r\n                </li>\r\n            </ol>\r\n        </nav>;\r\n    };","import {EventDetailsBreadcrumb} from \"./event-details/event-details-breadcrumb.component\";\r\nimport {EventDetails, EventDetailsTypes} from \"./common/event-details.component\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootState} from \"../../store\";\r\nimport {Event} from \"../domain/event\";\r\nimport {findEventById, getIdFromSlug} from \"../domain/location-event.service\";\r\n\r\nexport const EventDetailsPage = () => {\r\n    const { eventName } = useParams<{eventName: string}>();\r\n    const eventId = getIdFromSlug(eventName);\r\n    const event = useSelector<RootState, Event | undefined>(\r\n        state => findEventById(state.events.list, eventId)\r\n    );\r\n    return <>\r\n        {event !== undefined && <>\r\n                <EventDetailsBreadcrumb event={event}/>\r\n                <EventDetails type={EventDetailsTypes.EXTENDED} event={event}/>\r\n            </>\r\n        }\r\n    </>\r\n}","import \"./index.scss\";\nimport React from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport logo from \"./logo.svg\"\nimport {EventListPage} from \"./events/components/event-list-page.component\";\nimport {EventHomePage} from \"./events/components/event-home-page.component\";\nimport {EventDetailsPage} from \"./events/components/event-details-page.component\";\n\nexport default function App() {\n    return (\n        <HashRouter>\n            <header className={\"mx-5\"}>\n                <h1>\n                    <img src={logo} alt=\"Event plus Logo\" style={{width: \"16rem\", height: \"10rem\"}}/>\n                </h1>\n            </header>\n            <main className={\"mx-5\"}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <EventHomePage />\n                    </Route>\n                    <Route path=\"/events\">\n                        <EventListPage />\n                    </Route>\n                    <Route path=\"/event-category/:category\">\n                        <EventListPage />\n                    </Route>\n                    <Route path=\"/event/:eventName\">\n                        <EventDetailsPage />\n                    </Route>\n                </Switch>\n            </main>\n        </HashRouter>\n    );\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Event} from \"./domain/event\";\r\n\r\nexport default class EventRepository {\r\n    public static getList(): Promise<Event[]> {\r\n        return fetch(\"/api/events.json\").then(\r\n            (value: Response) => value.json()\r\n        );\r\n    }\r\n}","import EventRepository from \"./event-repository\";\r\nimport {Event} from \"./domain/event\";\r\n\r\nexport class EventService {\r\n    private static localStorageFavKey = \"favorites-event-ids\";\r\n\r\n    static getList(): Promise<Event[]> {\r\n        return EventRepository.getList();\r\n    }\r\n\r\n    static getStoredFavoritesSet(): Set<string> {\r\n        const storageFav = window.localStorage.getItem(EventService.localStorageFavKey);\r\n        if (storageFav) {\r\n            return new Set(\r\n                storageFav.split(\",\")\r\n            );\r\n        } else return new Set();\r\n    }\r\n    static storeFavoritesSet(favouriteIds: Set<string>): void {\r\n        const localstorageItem = Array.from(favouriteIds).join(\",\");\r\n        window.localStorage.setItem(EventService.localStorageFavKey, localstorageItem);\r\n    }\r\n}","import {EventService} from \"../event-service\";\r\nimport {EventStore} from \"./event-store\";\r\nimport { Middleware } from 'redux';\r\nimport {EventActions} from \"./event-reducer\";\r\n\r\nexport const EventMiddleware: Middleware<\r\n    {},\r\n    { events: EventStore }\r\n    > = storeApi => next => action => {\r\n    next(action);\r\n    if (\r\n        action.type !== EventActions.EVENTS_ADD_TO_FAVORITES &&\r\n        action.type !== EventActions.EVENTS_REMOVE_FROM_FAVORITES\r\n    ) return;\r\n    const favouritesIds = storeApi.getState().events.favoriteIds;\r\n    EventService.storeFavoritesSet(favouritesIds);\r\n}\r\n","import {combineReducers, compose, createStore, applyMiddleware} from \"redux\";\r\nimport {eventReducer} from \"./events/redux/event-reducer\";\r\nimport {EventMiddleware} from \"./events/redux/event-middleware\";\r\nimport {getPreloadedEventsSubStore} from \"./events/redux/event-store\";\r\nimport {geolocationReducer} from \"./geolocation\";\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst RootReducer = combineReducers({\r\n    events: eventReducer,\r\n    geolocation: geolocationReducer\r\n});\r\nexport const store = createStore(RootReducer,{\r\n    events: getPreloadedEventsSubStore()\r\n} , composeEnhancers(applyMiddleware(EventMiddleware)));\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import {Event} from \"../domain/event\";\r\nimport {EventService} from \"../event-service\";\r\n\r\nexport type EventStore = {\r\n    favoriteIds: Set<string>,\r\n    list: Event[],\r\n}\r\n\r\nexport const getPreloadedEventsSubStore = (): EventStore => {\r\n    return {\r\n        list: [],\r\n        favoriteIds: EventService.getStoredFavoritesSet()\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {EventsListFulfilled} from \"./events/redux/event-reducer\";\nimport EventRepository from \"./events/event-repository\";\n\nconst boostrapReact = () => ReactDOM.render(\n      <Provider store={store}>\n          <App />\n      </Provider>,\n  document.getElementById('root')\n);\n\nPromise.resolve().then(boostrapReact)\n    .then(() => {\n        return EventRepository.getList().then((list) => {\n            store.dispatch(EventsListFulfilled(list))\n        });\n    });\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}